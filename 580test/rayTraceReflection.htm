<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Ray trace reflection</title>
    <script src="jquery-2.1.3.min.js"></script>
    <script type="text/javascript" src="Vector3.js"></script>
    <script type="text/javascript" src="Ray3.js"></script>
    <script type="text/javascript" src="IntersectResult.js"></script>
    <script type="text/javascript" src="Sphere.js"></script>
    <script type="text/javascript" src="Plane.js"></script>
    <script type="text/javascript" src="Union.js"></script>
    <script type="text/javascript" src="PerspectiveCamera.js"></script>
    <script type="text/javascript" src="Color.js"></script>
    <script type="text/javascript" src="CheckerMaterial.js"></script>
    <script type="text/javascript" src="PhongMaterial.js"></script>
    <script type="text/javascript" src="Triangle.js"></script>

    <script type="text/javascript" src="LightSample.js"></script>
    <script type="text/javascript" src="PointLight.js"></script>
    <script type="text/javascript" src="DirectionalLight.js"></script>


    <script type="text/javascript">
function rayTraceRecursive(scene, ray, maxReflect) {

    var result = scene.intersect(ray);
    
    if (result.geometry) {
        var reflectiveness = result.geometry.material.reflectiveness;
        var color = result.geometry.material.sample(ray, result.position, result.normal);
        color = color.multiply(1 - reflectiveness);
        
        if (reflectiveness > 0 && maxReflect > 0) {
            var r = result.normal.multiply(-2 * result.normal.dot(ray.direction)).add(ray.direction);
            
            ray = new Ray3(result.position, r);
            // alert(result.position.x,result.position.y,result.position.z);
            var reflectedColor = rayTraceRecursive(scene, ray, maxReflect - 1);
            color = color.add(reflectedColor.multiply(reflectiveness));
        }
        return color;
    }
    else
        return Color.black;
}


function rayTraceShadow(canvas,scene,lights,camera,maxReflect)
{
     if (!canvas || !canvas.getContext) 
        return;

    var ctx = canvas.getContext("2d");
    if (!ctx.getImageData)
        return;

    var w = canvas.attributes.width.value;
    var h = canvas.attributes.height.value;
    ctx.fillStyle = "rgb(0,0,0)";
    ctx.fillRect(0, 0, w, h);

    var imgdata = ctx.getImageData(0, 0, w, h);
    var pixels = imgdata.data;

    scene.initialize();
    camera.initialize();
    //soft shadow lights
       for (var k in lights)
        lights[k].initialize();



 var i = 0;
    for (var y = 0; y < h; y++) {
        var sy = 1 - y / h;
        for (var x = 0; x < w; x++) {
            var sx = x / w;
            var ray = camera.generateRay(sx, sy);
            var color = rayTraceRecursive(scene, ray, maxReflect);
            pixels[i++] = color.r * 255;
            pixels[i++] = color.g * 255;
            pixels[i++] = color.b * 255; 
            pixels[i++] = 255;
            console.log("one pixel")
        }
    }


    var i = 0;
    for (var y = 0; y < h; y++) {
        var sy = 1 - y / h;
        for (var x = 0; x < w; x++) {
            var sx = x / w;
           
            var ray = camera.generateRay(sx, sy);
            var result = scene.intersect(ray);

            if (result.geometry) {
                var color = Color.black;
                for (var k in lights) {
                    var lightSample = lights[k].sample(scene, result.position);
 alert("1");
                    if (lightSample != lightSample.zero) {
                        var NdotL = result.normal.dot(lightSample.L);
   alert("2");
                        // < 90, light in fornt of the screen
                        if (NdotL >= 0)
                            color = color.add(lightSample.EL.multiply(NdotL));
                    }
                alert("3");
                }
      alert("4");
                pixels[i] += color.r * 255;
                pixels[i + 1] += color.g * 255;
                pixels[i + 2] += color.b * 255;
                pixels[i + 3] = 255;
               console.log("one pixel")
            }
            i += 4;
        }
    }

   

    ctx.putImageData(imgdata, 0, 0);

}

function rayTraceReflection(canvas, scene, camera, maxReflect) {
    if (!canvas || !canvas.getContext) 
        return;

    var ctx = canvas.getContext("2d");
    if (!ctx.getImageData)
        return;

    var w = canvas.attributes.width.value;
    var h = canvas.attributes.height.value;
    ctx.fillStyle = "rgb(0,0,0)";
    ctx.fillRect(0, 0, w, h);

    var imgdata = ctx.getImageData(0, 0, w, h);
    var pixels = imgdata.data;

    scene.initialize();
    camera.initialize();

    var i = 0;
    for (var y = 0; y < h; y++) {
        var sy = 1 - y / h;
        for (var x = 0; x < w; x++) {
            var sx = x / w;
            var ray = camera.generateRay(sx, sy);
            var color = rayTraceRecursive(scene, ray, maxReflect);
            pixels[i++] = color.r * 255;
            pixels[i++] = color.g * 255;
            pixels[i++] = color.b * 255;
            pixels[i++] = 255;
            console.log("one pixel")
        }
    }

    ctx.putImageData(imgdata, 0, 0);
}


function beginRender(){
    // alert(document.getElementById("intensity").value);
     Render();

$('#intensity').keyup(function(event) {
        Render();
});
// $('#locationbtn').addEventListener("click", changeLight);
$('#fov').keyup(function(event) {
        Render();
});
 
}

function changeLight()
{
    // alert("change light");
    Render();
}
function changeEyeView()
{
    Render();
}

function Render(){
    // try
$.get( "teapot.txt", function( data,Tri ) {
  var lines = data.split("\n");
  var Points = new Array();
  var TriList=new Array();
  for (var i = 0, len = lines.length; i < len; i++) 
    {
        vectors=lines[i].split(" ");
        if(vectors[0]=="v")
        {        
            Points.push(new Vector3(Number(vectors[1]),Number(vectors[2]),Number(vectors[3])));
        }
        if(vectors[0]=="f")
        {
            TriList.push(new Triangle(Points[Number(vectors[1])-1],Points[Number(vectors[2])-1],Points[Number(vectors[3])-1]));            
        }
    }
   
   
var plane = new Plane(new Vector3(0, 1, 0), 0);
var sphere1 = new Sphere(new Vector3(-10, 10, -10), 10);
var sphere2 = new Sphere(new Vector3(13,10,-10),7);
var tri1 = new Triangle(new Vector3(0, 5, -10), new Vector3(0,10,-10), new Vector3(5,10,-10));
// plane.material = new  CheckerMaterial(0.1, 0.5);
plane.material= new PhongMaterial(Color.green, Color.white,16,0.25);
sphere1.material = new PhongMaterial(Color.red, Color.white, 16, 0.25);
tri1.material = new PhongMaterial(Color.blue, Color.white, 16, 0.25);
sphere2.material=new PhongMaterial(Color.blue,Color.white,16,0.25);

    console.log(TriList[0].A);
    console.log(TriList[0].B);
    console.log(TriList[0].C);
   for(var i=0;i<TriList.length;i++)
    {
        TriList[i].material = new PhongMaterial(Color.blue, Color.white, 16, 0.25);
    }
    var test=new Array();
    for(var i=0;i<TriList.length;i++)
    {
        test.push(TriList[i]);
    }
    test.push(plane);
    test.push(sphere1);
    // test.push(tri1);
    // test.push(sphere2);


var u=new Union(test);
console.log("load finished")
// rayTraceReflection(
//     document.getElementById('renderCanvas'), 
//     u,
//     new PerspectiveCamera(new Vector3(0, 5, 15), new Vector3(0, 0, -1), new Vector3(0, 1, 0), 90),
//     40);

var lights = [];

var inten=parseInt(document.getElementById("intensity").value,10);

var x=parseInt(document.getElementById("lightx").value,10);

var y=parseInt(document.getElementById("lighty").value,10);

var zget=parseInt(document.getElementById("lightz").value,10);
// alert(x);
// alert(y);
// alert(zget);
// var x=10;
// var y=50;
// var zget=20;
var i=0;
var j=0;
var z=zget;
while(i<5){ 
    z=zget;
    j=0;
    while(j<5){      
        lights.push(new PointLight(Color.white.multiply(inten), new Vector3(x, y, z))); 
        z+=4;
        j++;
    }
            x+=4;
            i++;
 }
      

var fillLight;
fillLight = new DirectionalLight(Color.white.multiply(0.25), new Vector3(1.5,1,0.5));

fillLight.shadow = false;
lights.push(fillLight);

// rayTraceShadow( 
//     document.getElementById('renderCanvas2'), 
//     u,
//     lights,
//     new PerspectiveCamera(new Vector3(-5, 5, 5), new Vector3(0, 0, -1), new Vector3(0, 1, 0), 90),
//     3);

var eyex=parseInt(document.getElementById('eyex').value);
var eyey=parseInt(document.getElementById('eyey').value);
var eyez=parseInt(document.getElementById('eyez').value);
var fov =parseInt(document.getElementById('fov').value);
rayTraceShadow( 
    document.getElementById('renderCanvas'), 
    u,
    lights,
    new PerspectiveCamera(new Vector3(eyex, eyey, eyez), new Vector3(0, 0, -1), new Vector3(0, 1, 0), fov),
    3);

});

}


    </script>
</head>
<body onload="beginRender()">
   <!--  <canvas id="renderCanvas2" width="256" height="256"></canvas>
    <br><br> -->

<canvas id="renderCanvas" width="256" height="256"></canvas>
  
<h2>Point light</h2>
<div id="lightpara">
            <h3>Location:</h3>

                X: <input type="text" id="lightx" value="10"/>

                Y: <input type="text" id="lighty" value="50" />

                Z: <input type="text" id="lightz" value="20" />
            
                &nbsp;
                <button id="locationbtn" onclick="changeLight()"> Change</button>
 
           <h3>Intensity:</h3>

                Intensity:  <input type="text" id="intensity" value="80" />

          
<br>
<br>
<h2>Eye View</h2>

            <h3>Location:</h3>

                X: <input type="text" id="eyex" value="0"/>

                Y: <input type="text" id="eyey" value="5" />

                Z: <input type="text" id="eyez" value="15" />
            
                &nbsp;
                <button id="locationbtn" onclick="changeEyeView()"> Change</button>
 
           <h3>Field Of View :</h3>

                FOV:  <input type="text" id="fov" value="90" />
            
          
</div>
</body>
</html>
