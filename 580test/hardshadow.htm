<html >
<head>
    <title>Ray trace reflection</title>
    <script src="jquery-2.1.3.min.js"></script>
    <script type="text/javascript" src="Vector3.js"></script>
    <script type="text/javascript" src="Ray3.js"></script>
    <script type="text/javascript" src="IntersectResult.js"></script>
    <script type="text/javascript" src="Sphere.js"></script>
    <script type="text/javascript" src="Plane.js"></script>
    <script type="text/javascript" src="Union.js"></script>
    <script type="text/javascript" src="PerspectiveCamera.js"></script>
    <script type="text/javascript" src="Color.js"></script>
    <script type="text/javascript" src="CheckerMaterial.js"></script>
    <script type="text/javascript" src="PhongMaterial.js"></script>
    <script type="text/javascript" src="Triangle.js"></script>
    <!-- // <script type="text/javascript" src="tga.js"></script> -->

    <script type="text/javascript" src="LightSample.js"></script>
    <script type="text/javascript" src="PointLight.js"></script>
    <script type="text/javascript" src="DirectionalLight.js"></script>
    <script type="text/javascript">

// function triangleArea(A, B, C)
// {

//     var AB=Math.sqrt((B.x-A.x)*(B.x-A.x)+(B.y-A.y)*(B.y-A.y)+(B.z-A.z)*(B.z-A.z));
//     var BC=Math.sqrt((B.x-C.x)*(B.x-C.x)+(B.y-C.y)*(B.y-C.y)+(B.z-C.z)*(B.z-C.z));
//     var CA=Math.sqrt((C.x-A.x)*(C.x-A.x)+(C.y-A.y)*(C.y-A.y)+(C.z-A.z)*(C.z-A.z));
//     var P=0.5*(AB+BC+CA);
    
//     return Math.sqrt(P*(P-AB)*(P-BC)*(P-CA));
//  //return Math.abs(0.5 * (A.x*B.y + A.y*C.x+ B.x*C.y - B.y*C.x - A.y*B.x - A.x*C.y));
// }



// function getTextureColor(result,Cx,Cy)
// {
//         //console.log(Cx);
//         //add texture
//         var uv=new Array();
//         var object=result.geometry;
        
//         if(object instanceof Triangle)
//         {
//             uv[0]=object.uA;
//             uv[1]=object.uB;
//             uv[2]=object.uC;
           
            
            
            
//         var Norm=object.norm;
//         var d=-1*(Norm.dot(object.A));
//         var z=-1*(Norm.x*Cx+Norm.y*Cy+d)/Norm.z;
        
//         var A=object.A;var B=object.B;var C=object.C;
//      var totalarea=triangleArea(A,B,C);
//      var PAB=triangleArea(A,B,result.position);
//      var PBC=triangleArea(B,C,result.position);
//      var PAC=triangleArea(A,C,result.position);
        
        
//      var Interpolation=new Vector3(PBC/totalarea,PAC/totalarea,PAB/totalarea);
//      var   curU=Interpolation.x*uv[0].x+Interpolation.y*uv[1].x+Interpolation.z*uv[2].x;
//      //curU=1-curU;
//          //curU = curU * ((z/(10000 - z)) + 1);
//      var curV=Interpolation.x*uv[0].y+Interpolation.y*uv[1].y+Interpolation.z*uv[2].y;
//     //curV=1-curV;
//          //curV = curV * ((z/(10000 - z)) + 1);
//      //console.log(result);
//      //console.log(PBC);
//      //console.log(PAC);
//      //console.log(PAB);
//      //console.log(uv);
//      //curU=(uv[0].x+uv[1].x+uv[2].x)/3;
//      //curV=(uv[0].y+uv[1].y+uv[2].y)/3; 
//      console.log(curV);
//      console.log(curU);
        
//      var Image;var length;
//      console.log(object.libname);
//      switch (object.libname) {
//         case "Jeep_glass":Image=Imagedata_glass;length=32;
//         break;
//      case "Jeep_inside":
//      Image=Imagedata_inside;length=512;
//         break;
//         case "Jeep_outside":Image=Imagedata_outside;length=512;
//         break;
//      default:return Color.white;
//      break;
//      }
        
//      var x=Math.floor(curU*(length));
//      var y=Math.floor(curV*(length));
        
//      var idx=y+x*(length);
//      //var idx1=(x+1)+y*512;
//      //var idx2=x+(y+1)*512;
//      //var idx3=(x+1)+(y+1)*512;
        
//      var r=Math.floor(Image.data[4*idx])/255;
//      var g=Math.floor(Image.data[4*idx+1])/255;
//      var b=Math.floor(Image.data[4*idx+2])/255;
        
        
//      var c= new Color(r,g,b);
//      //console.log(c);
//          return c;
//         }
//         else
//         {
//         return Color.white;
//         }

        

// }

// function rayTraceRecursive(scene, ray, maxReflect,x,y) {
//     //console.log(x);
    
    
//     var result = scene.intersect(ray);
//     if (result.geometry) {
        
//         var color;var texturecolor;
//         if(result.geometry instanceof Triangle)
//         //if (1==2)
//         {
//         //texturecolor=getTextureColor(result,x,y);
//         result.geometry.material = new PhongMaterial(Color.white, Color.white, 16, 0.25);
//         //console.log(color);
//         }
        
        
//         color = result.geometry.material.sample(ray, result.position, result.normal);
    
        
//         var reflectiveness = result.geometry.material.reflectiveness;
//         //var color = result.geometry.material.sample(ray, result.position, result.normal);
        
//         //var color=texturecolor;
//        //add texture
        
//      //console.log(color);   
        
//      //console.log(texturecolor);
        
//         //color.add(texturecolor);
        
        
//         color = color.multiply(1 - reflectiveness);
        
//         if (reflectiveness > 0 && maxReflect > 0) {
//             var r = result.normal.multiply(-2 * result.normal.dot(ray.direction)).add(ray.direction);
//             ray = new Ray3(result.position, r);
//             var reflectedColor = rayTraceRecursive(scene, ray, maxReflect - 1,x,y);
            
//             color = color.add(reflectedColor.multiply(reflectiveness));
//         }
//         //console.log(color);
//         return color;
        
        
//     }
//     else
//         return Color.black;
        
// }

// function rayTraceReflection(canvas, scene, camera, maxReflect) {
//     if (!canvas || !canvas.getContext) 
//         return;

//     var ctx = canvas.getContext("2d");
//     if (!ctx.getImageData)
//         return;

//     var w = canvas.attributes.width.value;
//     var h = canvas.attributes.height.value;
//     ctx.fillStyle = "rgb(0,0,0)";
//     ctx.fillRect(0, 0, w, h);

//     var imgdata = ctx.getImageData(0, 0, w, h);
//     var pixels = imgdata.data;

//     scene.initialize();
//     camera.initialize();

//     var i = 0;
//     for (var y = 0; y < h; y++) {
//         var sy = 1 - y / h;
//         for (var x = 0; x < w; x++) {
//             var sx = x / w;
//             var ray = camera.generateRay(sx, sy);
//             //console.log(x);
//             var color = rayTraceRecursive(scene, ray, maxReflect,x,y);
//             pixels[i++] = color.r * 255;
//             pixels[i++] = color.g * 255;
//             pixels[i++] = color.b * 255;
//             pixels[i++] = 255;
//             console.log("one pixel")
//         }
//     }

//     ctx.putImageData(imgdata, 0, 0);
// }

function rayTraceRecursive(scene, ray, maxReflect) {

    var result = scene.intersect(ray);
    
    if (result.geometry) {
        var reflectiveness = result.geometry.material.reflectiveness;
        var color = result.geometry.material.sample(ray, result.position, result.normal);
        color = color.multiply(1 - reflectiveness);
        
        if (reflectiveness > 0 && maxReflect > 0) {
            var r = result.normal.multiply(-2 * result.normal.dot(ray.direction)).add(ray.direction);
            
            ray = new Ray3(result.position, r);
            // alert(result.position.x,result.position.y,result.position.z);
            var reflectedColor = rayTraceRecursive(scene, ray, maxReflect - 1);
            color = color.add(reflectedColor.multiply(reflectiveness));
        }
        return color;
    }
    else
        return Color.black;
}


function rayTraceShadow(canvas,scene,lights,camera,maxReflect)
{
     if (!canvas || !canvas.getContext) 
        return;

    var ctx = canvas.getContext("2d");
    if (!ctx.getImageData)
        return;

    var w = canvas.attributes.width.value;
    var h = canvas.attributes.height.value;
    ctx.fillStyle = "rgb(0,0,0)";
    ctx.fillRect(0, 0, w, h);

    var imgdata = ctx.getImageData(0, 0, w, h);
    var pixels = imgdata.data;

    scene.initialize();
    camera.initialize();
    //soft shadow lights
       for (var k in lights)
        lights[k].initialize();

 var i = 0;
    for (var y = 0; y < h; y++) {
        var sy = 1 - y / h;
        for (var x = 0; x < w; x++) {
            var sx = x / w;
            var ray = camera.generateRay(sx, sy);
            var color = rayTraceRecursive(scene, ray, maxReflect);
            pixels[i++] = color.r * 255;
            pixels[i++] = color.g * 255;
            pixels[i++] = color.b * 255; 
            pixels[i++] = 255;
            console.log("one pixel")
        }
    }


    var i = 0;
    for (var y = 0; y < h; y++) {
        var sy = 1 - y / h;
        for (var x = 0; x < w; x++) {
            var sx = x / w;
           
            var ray = camera.generateRay(sx, sy);
            var result = scene.intersect(ray);

            if (result.geometry) {
                var color = Color.black;
                for (var k in lights) {
                    var lightSample = lights[k].sample(scene, result.position);
                    if (lightSample != lightSample.zero) {
                        var NdotL = result.normal.dot(lightSample.L);
                        // < 90, light in fornt of the screen
                        if (NdotL >= 0)
                            color = color.add(lightSample.EL.multiply(NdotL));
                    }
                }
                if(pixels[i]<=255)
                pixels[i] += color.r * 255;
                if(pixels[i+1]<=255)
                pixels[i + 1] += color.g * 255;
                if(pixels[i+2]<=255)
                pixels[i + 2] += color.b * 255;
                pixels[i + 3] = 255;
               console.log("one pixel")
            }
            i += 4;
        }
    }

   

    ctx.putImageData(imgdata, 0, 0);

}

function beginRender(){
     Render();
}

function changeLight()
{
    // alert("change light");
    Render();
}
function changeEyeView()
{
    Render();
}


function Render(){ 

$.get( "Jeep.obj", function( data,Tri ) {

  var lines = data.split("\n");
  var Points = new Array();
  var TriList=new Array();
  var TextureList=new Array();
  var NormList=new Array();
  var MtlList=new Array();
  var libname;
  for (var i = 0, len = lines.length; i < len; i++) 
    {
        vectors=lines[i].split(" ");
        
        if(vectors[0]=="usemtl" || vectors[0]=="use")
        {
            libname=vectors[1];
            
        
        }
        if(vectors[0]=="v")
        {        
            Points.push(new Vector3(Number(vectors[1]),Number(vectors[2]),Number(vectors[3])));
        }
        if(vectors[0]=="f")
        {
            var v1=vectors[1].split("/");
            var v2=vectors[2].split("/");
            var v3=vectors[3].split("/");
            
            TriList.push(new Triangle(Points[Number(v1[0])-1],Points[Number(v2[0])-1],Points[Number(v3[0])-1],TextureList[Number(v1[1]-1)],TextureList[Number(v2[1]-1)],TextureList[Number(v3[1]-1)],NormList[Number(v1[2]-1)],NormList[Number(v2[2]-1)],NormList[Number(v3[2]-1)],libname));     
            //MtlList.push(libname);           
        }
        if(vectors[0]=="vt")
        {
            TextureList.push(new Vector3(Number(vectors[1]),Number(vectors[2]),0));
            
        }
        if(vectors[0]=="vn")
        {
            NormList.push(new Vector3(Number(vectors[1]),Number(vectors[2]),Number(vectors[3])));
        }
        
        
    }
    console.log(MtlList);
   var plane = new Plane(new Vector3(0, 1, 0), 0);
var sphere1 = new Sphere(new Vector3(-10, 10, -10), 10);
var tri1 = new Triangle(new Vector3(5, 5, -10), new Vector3(5,10,-10),new Vector3(10,10,-10),"none");
plane.material = new CheckerMaterial(0.1, 0.5);
// plane.material= new PhongMaterial(Color.green,Color.white,16,0.25);
sphere1.material = new PhongMaterial(Color.red, Color.white, 16, 0.25);
tri1.material = new PhongMaterial(Color.blue, Color.white, 16, 0.25);

    //console.log(TriList[0].A);
    //console.log(TriList[0].B);
    //console.log(TriList[0].C);
   for(var i=0;i<TriList.length;i++)
    {
        
        TriList[i].material =
         new PhongMaterial(new Color(0.741,0.741,0.407), new Color(0.741,0.741,0.741), 16, 0.25);
    }
    var test=new Array();
    for(var i=0;i<TriList.length;i++)
    {
        test.push(TriList[i]);
    }
    test.push(plane);
    test.push(sphere1);
    //test.push(tri1);
    
    //Begin Render
    
    // console.log(Imagedata_glass);
    // console.log(Imagedata_outside);
    // console.log(Imagedata_inside);
var u=new Union(test);
console.log("load finished")

var lights = [];

var inten=parseInt(document.getElementById("intensity").value,10);

var x=parseInt(document.getElementById("lightx").value,10);

var y=parseInt(document.getElementById("lighty").value,10);

var zget=parseInt(document.getElementById("lightz").value,10);

var i=0;
var j=0;
var z=zget;
// while(i<5){ 
//     z=zget;
//     j=0;
//     while(j<5){      
        // lights.push(new PointLight(Color.white.multiply(inten), new Vector3(x, y, z))); 
             lights.push(new PointLight(Color.white.multiply(1000), new Vector3(30, y, z))); 
 //        z+=4;
 //        j++;
 //    }
 //            x+=4;
 //            i++;
 // }


// var fillLight;
// fillLight = new DirectionalLight(Color.white.multiply(0.25), new Vector3(1.5,1,0.5));

// fillLight.shadow = false;
// lights.push(fillLight);


var eyex=parseInt(document.getElementById('eyex').value);
var eyey=parseInt(document.getElementById('eyey').value);
var eyez=parseInt(document.getElementById('eyez').value);
var fov =parseInt(document.getElementById('fov').value);
rayTraceShadow( 
    document.getElementById('renderCanvas'), 
    u,
    lights,
    new PerspectiveCamera(new Vector3(eyex, eyey, eyez), new Vector3(0, 0, -1), new Vector3(0, 1, 0), fov),
    3);

});

}
    
    
    
// });
// }); 
//  }); 
//  });  
 
// } 
  </script>
</head>
<body onload="beginRender()">
   <!--  <canvas id="renderCanvas2" width="256" height="256"></canvas>
    <br><br> -->

<canvas id="renderCanvas" width="512" height="512"></canvas>
  
<h2>Point light</h2>
<div id="lightpara">
            <h3>Location:</h3>

                X: <input type="text" id="lightx" value="10"/>

                Y: <input type="text" id="lighty" value="50" />

                Z: <input type="text" id="lightz" value="20" />
            
                &nbsp;
                <button id="locationbtn" onclick="changeLight()"> Change</button>
 
           <h3>Intensity:</h3>

                Intensity:  <input type="text" id="intensity" value="80" />

          
<br>
<br>
<h2>Eye View</h2>

            <h3>Location:</h3>

                X: <input type="text" id="eyex" value="0"/>

                Y: <input type="text" id="eyey" value="5" />

                Z: <input type="text" id="eyez" value="15" />
            
                &nbsp;
                <button id="locationbtn" onclick="changeEyeView()"> Change</button>
 
           <h3>Field Of View :</h3>

                FOV:  <input type="text" id="fov" value="70" />
            
          
</div>
</body>
</html>
